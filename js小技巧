奇偶数判断：5&1？alert('奇'):alert('偶');

通过bind()给setInterval传入this: 由于setInterval是window的方法，在setInterval中的this也都是默认指向window，而很多时候这都不是我们想要的。
现在我们可以这样:
setInterval(function(){
     alert(this)
   }.bind(this),1000)
   
var a = 1;应该分为两部分来看，var a和a = 1；第一部分会代码编译阶段执行var a的LHS操作，而a = 1会在执行阶段在代码代码原来的位置执行赋值；
当同时存在变量、函数声明时，函数的声明会在变量的声明之前，在相同命名的情况下，第二次的声明在未赋值的情况下不会影响第一次的赋值。

call/apply/bind:这三个方法的作用大同小异，都是用来改变函数的this对象的指向。call和apply的第一个参数都是指向要传入的this，call需要把要传
入新的对象的参数按顺序传入，而apply将参数装入数组后传入。bind和call、apply的区别在于是返回一个新的函数。
function foo(a,b){
  return this.name+'/'+a+b;
}
var me = {
  name:"kyle"
};

foo.call(me,2,3);             //"kyle/23"
foo.apply(me,[2,3]);          //"kyle/23"
foo.bind(me,2,3)();           //"kyle/23"
可以发现bind后面多了一个(),这是因为bind返回的是一个新建的函数，需要我们手动执行。这也就展示出bing和call、apply使用场景的区别。在call、apply、bind的
外面再包一层会发现this还是会丢失，如：setTimeout(foo.call(me))会将this指向window在全局找name。这是就需要使出终极武器来解决这个问题：
function fo(){
  foo.call(me);
};
fo();                     //kyle
setTimeout(fo,1000);      //kyle
fo.call(window);          //kyle
这样给call包一层后绑定this，之后再调用包装函数this就不会再变了。
